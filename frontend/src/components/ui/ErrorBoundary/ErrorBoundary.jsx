import React from 'react';
import { Result, Button, Typography, Card, Space, Alert, Collapse, Tag } from 'antd';
import { 
  ExclamationCircleOutlined, ReloadOutlined, HomeOutlined, BugOutlined,
  InfoCircleOutlined, WarningOutlined, CloseCircleOutlined, 
  WifiOutlined, LockOutlined, ClockCircleOutlined
} from '@ant-design/icons';
import './ErrorBoundary.css';

const { Paragraph, Text, Title } = Typography;
const { Panel } = Collapse;

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { 
      hasError: false, 
      error: null, 
      errorInfo: null,
      errorId: null,
      errorType: 'unknown'
    };
  }

  static getDerivedStateFromError(error) {
    const errorType = ErrorBoundary.categorizeError(error);
    return { 
      hasError: true,
      errorId: `ERR_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      errorType
    };
  }

  static categorizeError(error) {
    const message = error.message.toLowerCase();
    
    if (message.includes('network') || message.includes('fetch')) {
      return 'network';
    }
    if (message.includes('permission') || message.includes('unauthorized')) {
      return 'permission';
    }
    if (message.includes('timeout')) {
      return 'timeout';
    }
    if (message.includes('chunk') || message.includes('loading')) {
      return 'loading';
    }
    if (message.includes('memory') || message.includes('heap')) {
      return 'memory';
    }
    
    return 'application';
  }

  componentDidCatch(error, errorInfo) {
    console.error('üö® ErrorBoundary caught error:', error, errorInfo);
    
    this.setState({
      error,
      errorInfo
    });
    
    // Enhanced error reporting
    this.reportError(error, errorInfo);
  }

  reportError = (error, errorInfo) => {
    const errorReport = {
      errorId: this.state.errorId,
      type: this.state.errorType,
      message: error.message,
      stack: error.stack,
      componentStack: errorInfo.componentStack,
      props: this.props,
      userAgent: navigator.userAgent,
      url: window.location.href,
      timestamp: new Date().toISOString(),
      userId: this.props.user?.id,
      sessionId: sessionStorage.getItem('session_id'),
      buildVersion: process.env.REACT_APP_VERSION || '2.0.0',
      environment: process.env.NODE_ENV
    };
    
    // Send to error tracking service
    this.sendErrorReport(errorReport);
  };

  sendErrorReport = async (errorReport) => {
    try {
      // In production, send to error tracking service (Sentry, Bugsnag, etc.)
      await fetch('/api/errors/report', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(errorReport)
      });
      
      console.log('‚úÖ Error report sent:', errorReport.errorId);
    } catch (reportError) {
      console.error('‚ùå Failed to send error report:', reportError);
      // Store in localStorage as fallback
      this.storeErrorLocally(errorReport);
    }
  };

  storeErrorLocally = (errorReport) => {
    try {
      const existingErrors = JSON.parse(localStorage.getItem('pos_error_reports') || '[]');
      existingErrors.push(errorReport);
      
      // Keep only last 10 errors
      if (existingErrors.length > 10) {
        existingErrors.splice(0, existingErrors.length - 10);
      }
      
      localStorage.setItem('pos_error_reports', JSON.stringify(existingErrors));
    } catch (e) {
      console.error('Failed to store error locally:', e);
    }
  };

  handleRetry = () => {
    this.setState({ 
      hasError: false, 
      error: null, 
      errorInfo: null,
      errorId: null,
      errorType: 'unknown'
    });
    
    // Force component remount if needed
    if (this.props.onRetry) {
      this.props.onRetry();
    }
  };

  handleGoHome = () => {
    window.location.href = '/';
  };

  handleReportBug = () => {
    const errorDetails = {
      errorId: this.state.errorId,
      type: this.state.errorType,
      message: this.state.error?.message,
      stack: this.state.error?.stack,
      url: window.location.href,
      timestamp: new Date().toISOString()
    };
    
    // Create bug report
    const bugReport = encodeURIComponent(JSON.stringify(errorDetails, null, 2));
    const subject = encodeURIComponent(`[Enterprise POS] Bug Report - ${this.state.errorType}`);
    const body = encodeURIComponent(`
Chi ti·∫øt l·ªói:
${JSON.stringify(errorDetails, null, 2)}

M√¥ t·∫£ th√™m:
[H√£y m√¥ t·∫£ nh·ªØng g√¨ b·∫°n ƒëang l√†m khi g·∫∑p l·ªói]

C√°c b∆∞·ªõc t√°i hi·ªán:
1. 
2. 
3. 
    `);
    
    // Open email client or show modal
    window.open(`mailto:support@enterprisepos.com?subject=${subject}&body=${body}`);
  };

  getErrorIcon = () => {
    switch (this.state.errorType) {
      case 'network':
        return <WifiOutlined style={{ fontSize: 48, color: '#fa8c16' }} />;
      case 'permission':
        return <LockOutlined style={{ fontSize: 48, color: '#f5222d' }} />;
      case 'timeout':
        return <ClockCircleOutlined style={{ fontSize: 48, color: '#722ed1' }} />;
      case 'loading':
        return <WarningOutlined style={{ fontSize: 48, color: '#faad14' }} />;
      default:
        return <ExclamationCircleOutlined style={{ fontSize: 48, color: '#ff4d4f' }} />;
    }
  };

  getErrorTitle = () => {
    switch (this.state.errorType) {
      case 'network':
        return 'L·ªói k·∫øt n·ªëi m·∫°ng';
      case 'permission':
        return 'L·ªói ph√¢n quy·ªÅn';
      case 'timeout':
        return 'H·∫øt th·ªùi gian ch·ªù';
      case 'loading':
        return 'L·ªói t·∫£i t√†i nguy√™n';
      case 'memory':
        return 'L·ªói b·ªô nh·ªõ';
      default:
        return 'L·ªói ·ª©ng d·ª•ng';
    }
  };

  getErrorDescription = () => {
    switch (this.state.errorType) {
      case 'network':
        return 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.';
      case 'permission':
        return 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√≠nh nƒÉng n√†y. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.';
      case 'timeout':
        return 'Y√™u c·∫ßu m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.';
      case 'loading':
        return 'Kh√¥ng th·ªÉ t·∫£i m·ªôt s·ªë t√†i nguy√™n. Vui l√≤ng l√†m m·ªõi trang.';
      case 'memory':
        return '·ª®ng d·ª•ng s·ª≠ d·ª•ng qu√° nhi·ªÅu b·ªô nh·ªõ. Vui l√≤ng ƒë√≥ng m·ªôt s·ªë tab v√† th·ª≠ l·∫°i.';
      default:
        return '·ª®ng d·ª•ng g·∫∑p s·ª± c·ªë kh√¥ng mong mu·ªën. Ch√∫ng t√¥i ƒë√£ ghi nh·∫≠n v√† s·∫Ω kh·∫Øc ph·ª•c s·ªõm nh·∫•t.';
    }
  };

  getSuggestions = () => {
    switch (this.state.errorType) {
      case 'network':
        return [
          'Ki·ªÉm tra k·∫øt n·ªëi internet',
          'Th·ª≠ t·∫£i l·∫°i trang',
          'Ki·ªÉm tra t∆∞·ªùng l·ª≠a/proxy',
          'Li√™n h·ªá IT n·∫øu v·∫•n ƒë·ªÅ ti·∫øp t·ª•c'
        ];
      case 'permission':
        return [
          'ƒêƒÉng nh·∫≠p l·∫°i v·ªõi t√†i kho·∫£n ph√π h·ª£p',
          'Li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ c·∫•p quy·ªÅn',
          'Ki·ªÉm tra vai tr√≤ c·ªßa b·∫°n trong h·ªá th·ªëng'
        ];
      case 'timeout':
        return [
          'Th·ª≠ l·∫°i sau √≠t ph√∫t',
          'Ki·ªÉm tra t·ªëc ƒë·ªô internet',
          'ƒê√≥ng c√°c ·ª©ng d·ª•ng kh√°c ƒëang ch·∫°y'
        ];
      default:
        return [
          'L√†m m·ªõi trang',
          'ƒê√≥ng v√† m·ªü l·∫°i tr√¨nh duy·ªát',
          'X√≥a cache v√† cookies',
          'B√°o c√°o l·ªói n·∫øu v·∫•n ƒë·ªÅ ti·∫øp t·ª•c'
        ];
    }
  };

  render() {
    if (this.state.hasError) {
      const { 
        fallback, 
        showErrorDetails = process.env.NODE_ENV === 'development',
        showRetryButton = true,
        showHomeButton = true,
        className = '',
        minimal = false
      } = this.props;

      // Custom fallback UI
      if (fallback) {
        return typeof fallback === 'function' 
          ? fallback(this.state.error, this.state.errorInfo, this.handleRetry)
          : fallback;
      }

      // Minimal error UI
      if (minimal) {
        return (
          <div className={`error-boundary-minimal ${className}`}>
            <Alert
              message={this.getErrorTitle()}
              description={this.getErrorDescription()}
              type="error"
              showIcon
              action={
                <Space>
                  {showRetryButton && (
                    <Button size="small" danger onClick={this.handleRetry}>
                      Th·ª≠ l·∫°i
                    </Button>
                  )}
                </Space>
              }
            />
          </div>
        );
      }

      // Full error UI
      return (
        <div className={`error-boundary ${className}`}>
          <Result
            icon={this.getErrorIcon()}
            title={this.getErrorTitle()}
            subTitle={this.getErrorDescription()}
            extra={
              <Space direction="vertical" align="center" size="large">
                <Space wrap>
                  {showRetryButton && (
                    <Button 
                      type="primary" 
                      icon={<ReloadOutlined />}
                      onClick={this.handleRetry}
                    >
                      Th·ª≠ l·∫°i
                    </Button>
                  )}
                  
                  {showHomeButton && (
                    <Button 
                      icon={<HomeOutlined />}
                      onClick={this.handleGoHome}
                    >
                      V·ªÅ trang ch·ªß
                    </Button>
                  )}
                  
                  <Button 
                    icon={<BugOutlined />}
                    onClick={this.handleReportBug}
                  >
                    B√°o c√°o l·ªói
                  </Button>
                </Space>

                {/* Error metadata */}
                <Space align="center">
                  <Tag color="red">
                    <InfoCircleOutlined /> M√£ l·ªói: {this.state.errorId}
                  </Tag>
                  <Tag color="blue">
                    Lo·∫°i: {this.state.errorType}
                  </Tag>
                  <Tag color="default">
                    {new Date().toLocaleString('vi-VN')}
                  </Tag>
                </Space>

                {/* Suggestions */}
                <Card 
                  title="üí° G·ª£i √Ω kh·∫Øc ph·ª•c" 
                  size="small"
                  style={{ maxWidth: 400, textAlign: 'left' }}
                >
                  <ul style={{ marginBottom: 0, paddingLeft: 20 }}>
                    {this.getSuggestions().map((suggestion, index) => (
                      <li key={index} style={{ marginBottom: 4 }}>
                        <Text>{suggestion}</Text>
                      </li>
                    ))}
                  </ul>
                </Card>
              </Space>
            }
          />

          {/* Error Details (Development/Debug) */}
          {showErrorDetails && this.state.error && (
            <Card 
              title="üîß Chi ti·∫øt l·ªói (Debug)" 
              size="small"
              style={{ margin: '20px', textAlign: 'left' }}
              type="inner"
            >
              <Collapse ghost>
                <Panel header="Error Message" key="message">
                  <Paragraph code copyable style={{ background: '#f5f5f5', padding: 8 }}>
                    {this.state.error.message}
                  </Paragraph>
                </Panel>
                
                <Panel header="Stack Trace" key="stack">
                  <Paragraph 
                    code 
                    copyable 
                    style={{ 
                      whiteSpace: 'pre-wrap', 
                      background: '#f5f5f5', 
                      padding: 8,
                      maxHeight: 200,
                      overflow: 'auto'
                    }}
                  >
                    {this.state.error.stack}
                  </Paragraph>
                </Panel>
                
                {this.state.errorInfo && (
                  <Panel header="Component Stack" key="component">
                    <Paragraph 
                      code 
                      copyable 
                      style={{ 
                        whiteSpace: 'pre-wrap', 
                        background: '#f5f5f5', 
                        padding: 8,
                        maxHeight: 200,
                        overflow: 'auto'
                      }}
                    >
                      {this.state.errorInfo.componentStack}
                    </Paragraph>
                  </Panel>
                )}
              </Collapse>
            </Card>
          )}
        </div>
      );
    }

    return this.props.children;
  }
}

// Higher-order component for error boundaries
export const withErrorBoundary = (Component, errorBoundaryProps = {}) => {
  const WrappedComponent = (props) => (
    <ErrorBoundary {...errorBoundaryProps}>
      <Component {...props} />
    </ErrorBoundary>
  );
  
  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;
  return WrappedComponent;
};

// Hook for error handling
export const useErrorHandler = () => {
  const [error, setError] = React.useState(null);
  
  const handleError = React.useCallback((error, errorInfo = {}) => {
    console.error('üö® Handled error:', error);
    
    const errorReport = {
      message: error.message || 'Unknown error',
      stack: error.stack,
      ...errorInfo,
      timestamp: new Date().toISOString(),
      userAgent: navigator.userAgent,
      url: window.location.href,
      handled: true
    };
    
    // Store error state
    setError(errorReport);
    
    // Send to error tracking service
    fetch('/api/errors/report', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(errorReport)
    }).catch(console.error);
    
    // Auto-clear error after 5 seconds
    setTimeout(() => setError(null), 5000);
  }, []);
  
  const clearError = React.useCallback(() => {
    setError(null);
  }, []);
  
  return { error, handleError, clearError };
};

// Specialized error fallback components
export const NetworkErrorFallback = ({ onRetry, className = '' }) => (
  <Result
    status="warning"
    icon={<WifiOutlined style={{ color: '#fa8c16' }} />}
    title="L·ªói k·∫øt n·ªëi m·∫°ng"
    subTitle="Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet."
    extra={[
      <Button type="primary" icon={<ReloadOutlined />} onClick={onRetry} key="retry">
        Th·ª≠ l·∫°i
      </Button>,
      <Button key="offline" onClick={() => window.location.href = '/offline'}>
        Ch·∫ø ƒë·ªô offline
      </Button>
    ]}
    className={className}
  />
);

export const NotFoundErrorFallback = ({ onGoHome, className = '' }) => (
  <Result
    status="404"
    title="404"
    subTitle="Trang b·∫°n t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i."
    extra={
      <Button type="primary" icon={<HomeOutlined />} onClick={onGoHome}>
        V·ªÅ trang ch·ªß
      </Button>
    }
    className={className}
  />
);

export const PermissionErrorFallback = ({ onGoBack, className = '' }) => (
  <Result
    status="403"
    icon={<LockOutlined style={{ color: '#f5222d' }} />}
    title="403"
    subTitle="B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y."
    extra={[
      <Button type="primary" onClick={onGoBack} key="back">
        Quay l·∫°i
      </Button>,
      <Button key="contact" onClick={() => window.location.href = 'mailto:admin@enterprisepos.com'}>
        Li√™n h·ªá qu·∫£n tr·ªã
      </Button>
    ]}
    className={className}
  />
);

export const MaintenanceErrorFallback = ({ className = '' }) => (
  <Result
    status="warning"
    icon={<ClockCircleOutlined style={{ color: '#722ed1' }} />}
    title="H·ªá th·ªëng ƒëang b·∫£o tr√¨"
    subTitle="Ch√∫ng t√¥i ƒëang n√¢ng c·∫•p h·ªá th·ªëng ƒë·ªÉ mang ƒë·∫øn tr·∫£i nghi·ªám t·ªët h∆°n. Vui l√≤ng quay l·∫°i sau."
    extra={
      <Button type="primary" onClick={() => window.location.reload()}>
        Ki·ªÉm tra l·∫°i
      </Button>
    }
    className={className}
  />
);

export default ErrorBoundary;